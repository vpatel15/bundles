#!/usr/bin/env node

'use strict';

/**
 * Copyright (c) 2016, Ivan Enderlin and Liip
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * 3. Neither the name of the copyright holder nor the names of its contributors
 *    may be used to endorse or promote products derived from this software without
 *    specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
 * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

var fs      = require('fs');
var glob    = require('glob');
var path    = require('path');
var program = require('commander');

program
    .usage('[options]')
    .option(
        '-d, --directory <directory>',
        'Directory where sniffer files are located.'
    )
    .option(
        '-o, --output <output>',
        'Filename where to write the compiled sniffers.',
        __dirname + '/resource/sniffers.js'
    )
    .parse(process.argv);

if (!program.directory) {
    program.help();
    process.exit(1);
}

var output = fs.createWriteStream(
    program.output,
    {
        flag: 'a',
        defaultEncoding: 'utf8'
    }
);

var appendToOutput = function (file) {
    process.stdout.write(file + "\n");
    fs.writeFileSync(
        program.output,
        fs.readFileSync(file, {encoding: 'utf-8'}),
        {
            flag    : 'a',
            encoding: 'utf8'
        }
    );
};

function findNodeModules() {
    var out = __dirname;

    while (false === fs.existsSync(out + '/node_modules')) {
        out = path.dirname(out);

        if ('/' === out) {
            return null;
        }
    }

    return out + '/node_modules';
}

var nodeModulesPath = findNodeModules();

if (null !== nodeModulesPath) {
    glob.sync(nodeModulesPath + '/HTML_CodeSniffer/Standards/**/*.js').forEach(appendToOutput);
    glob.sync(nodeModulesPath + '/HTML_CodeSniffer/HTMLCS.js').forEach(appendToOutput);
}

glob.sync(program.directory + '/**/*.js').forEach(appendToOutput);
